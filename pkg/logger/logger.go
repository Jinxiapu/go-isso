/*
Package logger add a debug level log for *log*.
*/
package logger

import (
	"fmt"
	"io"
	"log"
)

// These flags define which text to prefix to each log entry generated by the Logger.
// Bits are or'ed together to control what's printed.
// There is no control over the order they appear (the order listed
// here) or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
//	2009/01/23 01:23:23 message
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// Logger add debug flag for *log.Logger*
type Logger struct {
	*log.Logger
	debug bool
}

// New return a debug logger
func New(out io.Writer, prefix string, flag int, debug bool) *Logger {
	return &Logger{log.New(out, prefix, flag), debug}
}

func (l *Logger) Debug(v ...interface{}) {
	if l.debug {
		l.Output(2, fmt.Sprintf("[DEBUG] %s", fmt.Sprint(v...)))
	}
}

func (l *Logger) Debugln(v ...interface{}) {
	if l.debug {
		l.Output(2, fmt.Sprintf("[DEBUG] %s", fmt.Sprintln(v...)))
	}
}

func (l *Logger) Debugf(format string, v ...interface{}) {
	if l.debug {
		l.Output(2, fmt.Sprintf("[DEBUG] %s", fmt.Sprintf(format, v...)))
	}
}
